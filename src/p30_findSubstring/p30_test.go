package p30_findSubstring

import (
	"fmt"
	"testing"
)

func TestAAA(t *testing.T) {
	seq := []string{"a", "b", "c", "d", "e"}
	// 指定删除位置
	index := 0
	// 将删除点前后的元素连接起来
	seq = append(seq[:index], seq[index+1:]...)
	fmt.Println(seq) //[a b d e]
}

func TestFindSubstring(t *testing.T) {
	s := "aaaaaaaa"
	words := []string{"aa", "aa", "aa"}
	res := findSubstring(s, words)
	fmt.Println("res=", res)
}

func TestFindSubstring2(t *testing.T) {
	s := "wordgoodgoodgoodbestword"
	words := []string{"word", "good", "best", "good"}
	res := findSubstring(s, words)
	fmt.Println("res=", res)
}

func TestFindSubstring3(t *testing.T) {
	s := "barfoothefoobarman"
	words := []string{"foo", "bar"}
	res := findSubstring(s, words)
	fmt.Println("res=", res)
}

func TestFindSubstring4(t *testing.T) {
	s := "xjpguhvytyjcknhjqkwelhjqbdgtwxgvgxbdeydxwozidiutuqafxjxaodtkdbfjyiocgtbfhcplmjggbgoarlcgpxssyadyiuapndwxhlitvoayvqzobbuqzpkzpqyzkaqzgmwnyghvvjtszuiawdtxufylvwkhzbhfpfsnmbkjkedlylowqjvkquxmsivrlewakrqysahfgmqhxgfqpbcgxaupkrhvwfviwngrqpwybohaxnsoqvwpxqehkncgvzqtpwkflidoznqwcjksehjdzpkjdmranhtcfejsopgncxjeguymbhpcwbmbpfbcnvhsbqnpftdjsonainoludqtgcwvjyywvhryxepfzuqsjgstthhqmxltbhokfojcvcavgqchmszvyupudykrvvmwedikrroptrmbjojvgkrheibjgnbdknboqjakbpbwgnyrbhmjtfqantjvgmaqcbhulhgowhkeukvxrkhnpznfvwcdldwnedjpkqfjxqnualruvahmcwrxuuafxwubzetmwyvtqkntvhnshwhjsyimujuthoxjuqvqqqmhazayipsqnzbfaktuvpocennadirvadcdeedpvvfixipxujtpajugwhhbsaxsfbvliaadwhmvqbsmmnenxavvhcxbcwwjxtvfuvlqdxlvafhpsnernznxemygiuqfonniiyanxnkzuuoohugvwvsajsirnyydnnnwnplkcwkyqamxvuurrmrafztuauzphmlvdzhfvrflurkpmfidtbgycbuevtufhhakgjrdbwqvqbmciwhbxpcbrwgmscrbjtmsffvgemdupryxphaoxcpobxcvbwwnrkfwscewqjsfcqerzffwjxmmwrhynelgosfiujenvwsxozpogwmrtbeqslqhrbnitsqpevcztxykynaemmvhnbzhnpogqeolyfdccfdxecjcrjidyelnhmvuclduprioylscswaxylbpvkvvqikxuhuytxtkqbapottgrvfphjgetdzjljigrcembzwsczjqsczlygcfpijkmktzvehmgoaknzcqylisnjdlqfshpbsdnndjrkxayykoxogxzqpoascsxubmytsljvuahucisowrccobudsuxuouoqimlaauxwxhqbpkqldsptwjyogviurymclyenueltlcvaollufcnbnmptjzqbycflcjyxnjsynnaealygpljdzzyjyomyrtjvchustnsgctkdgklwwubxvziwouuhpecslxmgmepoxbremcckzdhucqqqmlzcpcwcbilnmabkbtqpxszwvhtzzjslwrnntlsutdjgflsigkyfcxezexydiqrfigudsmalrjtwunfcxdibcmajjbotrfybmtfghftzqpxlcepcjxdmlgvwhjqarqcdlhltoeuettryyhahgfvsnqqucgxtzzykijfwpbcjvujvdjelqadeswawcxpdwpoeyvcqxfzubipetvpjxvpqtqmxpebotpuumxkjelffvwlosczpzrhsjwqycrmvihrugbgkolrjiezcgbtisbadzsbblqytzsqfvyrklitvmvxuyrcqufvvzwyloygnqwsmwjwitrdhobcmugcqnzlnwlykjeaadsmzekhxdlhsojekrjafinseysrjyrjblxbrjkrnvyflhjvasxfbkzhkraustdtfdwymhpzengqwqnxklelvetixvcpphjwkhuzokavxhlwzatjlxxjdqrbnvsccdypltqzdswcbhyaktmxrjgwbzxowqrzvpqgkiipaescoscymovfxebyfbpctgdoxvxidfxdjrfzmkxaavhabiyilpkevpvvksfpzetiwakkkjklgrlhblqnbctyuqtgkawjfrubrenenxpuqcdrptgsyctusmadnyospivhminahewxgzoxvxqtzjntxpymongdvdmknzkudirlhijchbxgkmbjcawsnevkikuvjgspolcyvlacmakymmiqmgibkensqiqbqiqfttdpgfrvfevsqdkelthwzuqpegqvqjakefbmkuhsyfmokwswpbsqwkfatyvjjxvncwzprjhpoteypywhcqxybfaufyfovbbaxcponygdrkeikarmrrmuwnqblvpiwsiuwzkkxqnqctbpusdnlqhhfxkssbapvllskvekmtcqndfhyjujbdtgafauhclenwwaucmiwoyjugqupmfspaarganpcztqxssruebqucbqirkzfsrwsrnardpvclnzfftblusgyvwgnjfudyrvpgwijngnatnfbihmebudwtjlerihrbchjartqzistxyufhikkdpiwauarejjfnsooljglsygpyaxhijrnyalywnsawdfkxtaidgvxgbmhdloougbsipteclezqljnejvjrtgzuvgygvoddrxlgqrjdxititgoeeavxiwrfdroahrdzoqfhhokgygormevsespnpjsscgukzxjopoxyfjedpuxeyswfnoucxmwbvqlwpwmgljestkviesoennjabfeauabpsnljjapwjvochmnngbrvodxribredttvihgthxsssivbwkodniaelyvvzpadkvasejnngfgbqdcmprpczqgmoejptlsdjvxpekdmslniqqufjmhieqwuufjntescbpthbyttjhdbzaiiosssioocvzrqdjugaonbmhxyqczpcixqarkkfaocaftfqnmsbbtqisoyvppxzoqbfclmdzpdgkiyxwqbymtiehjzyyzynrzutnhymwbvimvhkmiiadtekcgjafjpyikrvtqkrthzhcgsqrcquvxhxdsakbrkldbjwttnpcowgvqzotriqorotjqfmhpylthhocxdelcmiulwpdhgtywpkmuwvmugfbqtfpzlcdylxjhnoovkprzzdtvafqjmtbizqhmsmkdlwnykdtusmvrrpnswfbjacrbuaommysxwhyjktdfgzwzqlrmssxtwowqqkfclxchgcqqvwvdxudnhwbarzvnpregclknkowqqniojgtgayvhvyjozebpwhxasjncajuqydghjcplakuxlelkipbgwygrkvvkfqcdvlnenerpplpapcmatogqmnjyiekpwpvrakxpoqgfcxhtcutvicnwrwvbdhtbwovyaupolyunxdizxcvfgiezhbamitnhjkhjfxaqxwfuznuzppgxzkwilxuuskdewkpbhprenwbpkvobmubnfxwqwsmrepvbakejcwqpuregmukaplnuklmjgzamqxpqjualsqdmhjvvefxtskpeybngcpstmilweljwdoimyfhcmgxermlrpyxuqrnebycfmmbpamcyrlceszkllvedwbxmumqwktbyhdojrskidmoxmbizymeupbimnbiawlydoomfgyqmlgjzhuygifcagnmwowykhypyndfvcvhpetolpotztybclpyblwlvuctjhyflwoaajonydhawfbysrytewgztiucrvhdrydthsgixpkvwlwoeujlrpmkzhorcywvwzoftwnsoxoklkbrekcxcrjdyywcwszsupxnlngbmwmxgprmbvkdmthmrdqnyphsehhsuptilhiryzeauqdhjmtdsmqqbakihtcdjxluhtofsufpklwvxryrdrjhrtpyntdyqouxkideeitotrmtlkkqbuxsposchvaamxxyfccknyairmbczovaiuvzjneslguzdsxjwbvjzxsrmvvljqntlitwyxqldlkjfjsbkpnmohfaecnqtblgleelduwjhismtmqgdfurozusbhkwkweyckjihitosldozvuccovqppksxvrjtxhvitdrbwfvjkjkhdmjtkbizodyluietpzbifslbahnmqxuwmfpwjaxzdwkzeqstrweworaqypfrmznagewreuqjqaiwsdrkzvgpnignxnemotmuylmcheozhyvzbmjaksqzcyoclvozocvmnjrwofvvdswhhghtazucziekdulsxjgkszjieefkxcrekaxkatozbtmhnzbmihzdhinnmtzlxsrjtqtvjjwleksukvgucfzlnpbcianhthqoxllhuhuzsotejbanhazwpcyzcoixvanulydhgxganbeydgmminizphatxitsigmvfqdnplnfptdszrgieohvxirwskodqdyxvdkmpzresxyuoeevunsuxjqqthvkmthhxuvotnsoksiayovsboobzfttoofahmhggcucroqdgaeeqbzrppupunkkbpkldtrkymopcgvjgzpwaopsekjaxtlzixkltdxrrliurddzesxfjnzpzipwbcxlcjwvpwmghwabafcgyanjnmymupkxukiwvhtkdhrmdrnfxsmxszihogtixfirpsplzixcrorvigcfyqeqqmxeusoraylprccsnaveqobyueftullmxjstdjndhavacztpzqusevqybwtwhfihodctmpxvpswurpjthfllddlezfcjknsaquvcmsxdmvzemjztqkgtpsarzcalpunhqiledlipgjttsuolgvewpenohnbyjogzyrebeorlxmgshudnpjjgowwxlxxunfwmzapdqgonvuhcrkriubpkzljnlghymdmlfcqvkflfbsjsfbdbculdfwqscatqffdljuiubvbcqlxvmcwqwjvbhmwjmpcrufegbpackdhaoexcgvucgqfncbzqsbjniotkfvmpytspzprflmjrerhgugynhhapxvzcsosqhmhjbzqonaittpznvzaegctezvgrjaksorbsssghuqanhbaeadihfenfzvykwiekcgcualeubejlglpioyrwceddabnymrioznkbaoxdtgobsejicbeghhjhjyfvrqltfvufksifyxgsdrbhufncnyjywrvphgimddtnxbsxayqdsrkmyxonxantrilaqtouyhjvicvlclouebjeaxsyxftqqeqgaecynmwyqrjuexpiyymbxgzxmsnexgkxmpxabvytmhnsgeahepicxhbjbonywaxjrxlusjnhsazyfchlrpnqyqaahpadryoivzepkrwcuwdbykmrachasjazbbfsbtdwvhnfbkivgnwgxkxzmeahqagrbnlchqacaqjbatyigwoggnfvtfcjikclyoqheslgiuhiohswdickvihrpjaxtflttbaztlgcgpmwxhsapvmnfteueguylfrgiugbfmflduhadcdsxphellypuupfbjojduniiuwlqfothrmggvkthljdfakjjysoshzcevquceokvcqdxbxgoijtkucwuxknglrkghfjlvviznowqnfexqyhkcdfbquibnskvzviwstvfhuwubatraaedglgwfozujlpkgahategcacybcrtftxiziqxpfxjqibcrdlryqzasbaugrplmmvmwljnsgwkrznkcydaqdcjgcfmvuziguweifrcopnhpcrtcuwtzyegdjsadsklogryoibczqjquckwygrygxeliymlswyhfphtxkxzaipwmzvkhoiomobunnifmgorwwmvgjujtmhflcpvraldomzbahjmqzfovrjecgpvuwafzrcqrnvicwlceuqwuxkrqvxsdmpxjrfkihccxzmzvxdbuvxqshhkdhcgttgeklousqyrpkqnitocqoskvbuaiwjeppibcxwupumhfeupakrqylbwovyxujblalncilxaflhmrdbrpuiqhlmwgmvawyowjbzumyutldicilwxggnprblzoicmgqkqrjkfjgywjgbrsxoaderwffvvnxhunsmedwjpcklnqogklwmqaemijidyfnsvfezkclzgvntnbbypymfysugdemcjzuggbgqftqmofhbgjbvhqdhixqmbcomdktjnbzturhkwonfxpagffqpegdfitulgpwtsvoopvylklqjctsjaizfoemyyglexhxpeodtjdhtpzftuxdvfeavimtgvemslmkranljtsfkrkdmjghomjjxvedqislvevmekzndtsnlerznzidorolosqhciszmnoszngdhasuflvundybwommhetlpnlbczucochvczrjlmgyrgbnuncdtvpilamnbippkwnoyeajrijiokyizaosxddifpwiznxlmkbkpdvileqzqqkpqyjodoyifuseippuctgtwbbihthxktmarxqwmpgrjyytonpsgvldymnffwepqssjqigexovjntedjwvrtgwssjzzgepywhjorpsreoctjgwucrmyxksrurqcxhcuoliidbzhrbccjyxoplmovefrxxvvfxpvjzdmcevvfxyrvxfmkrcfxjzugurnsijdiormtmialirihyurryyohxlnucbmlmrvaihvwpyhzrrgqnxhlwysvjhplkdywutzebwaswjsoaygnwnyunqpwahkkkijhcilfgmxdvptwqzlmokicczycgkprtyyxijcoxbtvrmthlevcodetcexlpmckkcjunljlmegfrboeflgwqmpvrmgibiulmdgzqrmcvukmvatbmzxemozfafndpjpdmxdcqrglmsajttkhujniznncucfklunxtsbjkixyczhvuueofsxfhmhbpmnchdccxdmhnlhqkpneluuqotvvgcyxpmzyrdaojo"
	words := []string{"twjyogviurymclyenueltlcvao", "tmilweljwdoimyfhcmgxermlrp", "ikuvjgspolcyvlacmakymmiqmg", "agrbnlchqacaqjbatyigwoggnf", "mbzwsczjqsczlygcfpijkmktzv", "vljqntlitwyxqldlkjfjsbkpnm", "beqslqhrbnitsqpevcztxykyna", "usqyrpkqnitocqoskvbuaiwjep", "ibkensqiqbqiqfttdpgfrvfevs", "wszsupxnlngbmwmxgprmbvkdmt", "fpzetiwakkkjklgrlhblqnbcty", "sxdmvzemjztqkgtpsarzcalpun", "wceddabnymrioznkbaoxdtgobs", "hpecslxmgmepoxbremcckzdhuc", "ztuauzphmlvdzhfvrflurkpmfi", "ptrmbjojvgkrheibjgnbdknboq", "vgjujtmhflcpvraldomzbahjmq", "ygormevsespnpjsscgukzxjopo", "qdkelthwzuqpegqvqjakefbmku", "hsazyfchlrpnqyqaahpadryoiv", "ickvihrpjaxtflttbaztlgcgpm", "hnshwhjsyimujuthoxjuqvqqqm", "ejicbeghhjhjyfvrqltfvufksi", "hustnsgctkdgklwwubxvziwouu", "jrfzmkxaavhabiyilpkevpvvks", "reuqjqaiwsdrkzvgpnignxnemo", "wyloygnqwsmwjwitrdhobcmugc", "fvwlosczpzrhsjwqycrmvihrug", "ehmgoaknzcqylisnjdlqfshpbs", "irvadcdeedpvvfixipxujtpaju", "mcwrxuuafxwubzetmwyvtqkntv", "lcjwvpwmghwabafcgyanjnmymu", "hdloougbsipteclezqljnejvjr", "hmrdqnyphsehhsuptilhiryzea", "wunfcxdibcmajjbotrfybmtfgh", "aeeqbzrppupunkkbpkldtrkymo", "rbnvsccdypltqzdswcbhyaktmx", "jqqthvkmthhxuvotnsoksiayov", "uqtgkawjfrubrenenxpuqcdrpt", "mvmwljnsgwkrznkcydaqdcjgcf", "wcdldwnedjpkqfjxqnualruvah", "bamitnhjkhjfxaqxwfuznuzppg", "moxmbizymeupbimnbiawlydoom", "xyfjedpuxeyswfnoucxmwbvqlw", "aftfqnmsbbtqisoyvppxzoqbfc", "zepkrwcuwdbykmrachasjazbbf", "akjjysoshzcevquceokvcqdxbx", "pcgvjgzpwaopsekjaxtlzixklt", "zucziekdulsxjgkszjieefkxcr", "jrnyalywnsawdfkxtaidgvxgbm", "xpkvwlwoeujlrpmkzhorcywvwz", "qzotriqorotjqfmhpylthhocxd", "wymhpzengqwqnxklelvetixvcp", "ceuqwuxkrqvxsdmpxjrfkihccx", "iwstvfhuwubatraaedglgwfozu", "ohfaecnqtblgleelduwjhismtm", "ekaxkatozbtmhnzbmihzdhinnm", "uvxhxdsakbrkldbjwttnpcowgv", "vafhpsnernznxemygiuqfonnii", "sbtdwvhnfbkivgnwgxkxzmeahq", "gwhhbsaxsfbvliaadwhmvqbsmm", "yueftullmxjstdjndhavacztpz", "qgdfurozusbhkwkweyckjihito", "hsyfmokwswpbsqwkfatyvjjxvn", "gxtzzykijfwpbcjvujvdjelqad", "schvaamxxyfccknyairmbczova", "prpczqgmoejptlsdjvxpekdmsl", "tpzbifslbahnmqxuwmfpwjaxzd", "zmzvxdbuvxqshhkdhcgttgeklo", "bapottgrvfphjgetdzjljigrce", "qchmszvyupudykrvvmwedikrro", "sorbsssghuqanhbaeadihfenfz", "xpfxjqibcrdlryqzasbaugrplm", "ftqqeqgaecynmwyqrjuexpiyym", "qusevqybwtwhfihodctmpxvpsw", "jekrjafinseysrjyrjblxbrjkr", "kriubpkzljnlghymdmlfcqvkfl", "ynelgosfiujenvwsxozpogwmrt", "bwovyaupolyunxdizxcvfgiezh", "dtnxbsxayqdsrkmyxonxantril", "mvuziguweifrcopnhpcrtcuwtz", "emmvhnbzhnpogqeolyfdccfdxe", "drbwfvjkjkhdmjtkbizodyluie", "dnlqhhfxkssbapvllskvekmtcq", "pwhxasjncajuqydghjcplakuxl", "jlpkgahategcacybcrtftxiziq", "tzsqfvyrklitvmvxuyrcqufvvz", "llvedwbxmumqwktbyhdojrskid", "mflduhadcdsxphellypuupfbjo", "eswawcxpdwpoeyvcqxfzubipet", "elkipbgwygrkvvkfqcdvlnener", "uiubvbcqlxvmcwqwjvbhmwjmpc", "bxgzxmsnexgkxmpxabvytmhnsg", "rjgwbzxowqrzvpqgkiipaescos", "clvozocvmnjrwofvvdswhhghta", "oftwnsoxoklkbrekcxcrjdyywc", "ypyndfvcvhpetolpotztybclpy", "qeqqmxeusoraylprccsnaveqob", "ftzqpxlcepcjxdmlgvwhjqarqc", "lknkowqqniojgtgayvhvyjozeb", "puregmukaplnuklmjgzamqxpqj", "banhazwpcyzcoixvanulydhgxg", "ualsqdmhjvvefxtskpeybngcps", "ynnaealygpljdzzyjyomyrtjvc", "cjcrjidyelnhmvuclduprioyls", "ubmytsljvuahucisowrccobuds", "fyxgsdrbhufncnyjywrvphgimd", "aelyvvzpadkvasejnngfgbqdcm", "wnqblvpiwsiuwzkkxqnqctbpus", "sldozvuccovqppksxvrjtxhvit", "blwlvuctjhyflwoaajonydhawf", "yanxnkzuuoohugvwvsajsirnyy", "ihrbchjartqzistxyufhikkdpi", "vobmubnfxwqwsmrepvbakejcwq", "tmuylmcheozhyvzbmjaksqzcyo", "tgzuvgygvoddrxlgqrjdxititg", "pgwijngnatnfbihmebudwtjler", "dxrrliurddzesxfjnzpzipwbcx", "hqiledlipgjttsuolgvewpenoh", "pwmgljestkviesoennjabfeaua", "xzkwilxuuskdewkpbhprenwbpk", "kyfcxezexydiqrfigudsmalrjt", "pplpapcmatogqmnjyiekpwpvra", "phjwkhuzokavxhlwzatjlxxjdq", "gsyctusmadnyospivhminahewx", "lmdzpdgkiyxwqbymtiehjzyyzy", "kfwscewqjsfcqerzffwjxmmwrh", "urpjthfllddlezfcjknsaquvcm", "lnpbcianhthqoxllhuhuzsotej", "qcbhulhgowhkeukvxrkhnpznfv", "nrzutnhymwbvimvhkmiiadtekc", "cymovfxebyfbpctgdoxvxidfxd", "tzlxsrjtqtvjjwleksukvgucfz", "hazayipsqnzbfaktuvpocennad", "bpsnljjapwjvochmnngbrvodxr", "hogtixfirpsplzixcrorvigcfy", "vpjxvpqtqmxpebotpuumxkjelf", "gjafjpyikrvtqkrthzhcgsqrcq", "eahepicxhbjbonywaxjrxlusjn", "gowwxlxxunfwmzapdqgonvuhcr", "bmciwhbxpcbrwgmscrbjtmsffv", "wauarejjfnsooljglsygpyaxhi", "dqdyxvdkmpzresxyuoeevunsux", "rufegbpackdhaoexcgvucgqfnc", "fgyqmlgjzhuygifcagnmwowykh", "nenxavvhcxbcwwjxtvfuvlqdxl", "pkxukiwvhtkdhrmdrnfxsmxszi", "vtfcjikclyoqheslgiuhiohswd", "qnzlnwlykjeaadsmzekhxdlhso", "cswaxylbpvkvvqikxuhuytxtkq", "fqjmtbizqhmsmkdlwnykdtusmv", "dnndjrkxayykoxogxzqpoascsx", "kudirlhijchbxgkmbjcawsnevk", "ibredttvihgthxsssivbwkodni", "ndfhyjujbdtgafauhclenwwauc", "dlhltoeuettryyhahgfvsnqquc", "zfovrjecgpvuwafzrcqrnvicwl", "wvhtzzjslwrnntlsutdjgflsig", "cwzprjhpoteypywhcqxybfaufy", "kxpoqgfcxhtcutvicnwrwvbdht", "yxuqrnebycfmmbpamcyrlceszk", "qtfpzlcdylxjhnoovkprzzdtva", "ofsufpklwvxryrdrjhrtpyntdy", "jakbpbwgnyrbhmjtfqantjvgma", "elcmiulwpdhgtywpkmuwvmugfb", "bgkolrjiezcgbtisbadzsbblqy", "bysrytewgztiucrvhdrydthsgi", "sboobzfttoofahmhggcucroqdg", "goijtkucwuxknglrkghfjlvviz", "fbsjsfbdbculdfwqscatqffdlj", "fovbbaxcponygdrkeikarmrrmu", "llufcnbnmptjzqbycflcjyxnjs", "wygrygxeliymlswyhfphtxkxza", "dnnnwnplkcwkyqamxvuurrmraf", "uxuouoqimlaauxwxhqbpkqldsp", "gzoxvxqtzjntxpymongdvdmknz", "byttjhdbzaiiosssioocvzrqdj", "dtbgycbuevtufhhakgjrdbwqvq", "iuvzjneslguzdsxjwbvjzxsrmv", "sjgstthhqmxltbhokfojcvcavg", "qouxkideeitotrmtlkkqbuxspo", "gemdupryxphaoxcpobxcvbwwnr", "ipwmzvkhoiomobunnifmgorwwm", "pvclnzfftblusgyvwgnjfudyrv", "hgcqqvwvdxudnhwbarzvnpregc", "yegdjsadsklogryoibczqjquck", "qqqmlzcpcwcbilnmabkbtqpxsz", "ugaonbmhxyqczpcixqarkkfaoc", "jduniiuwlqfothrmggvkthljdf", "nowqnfexqyhkcdfbquibnskvzv", "niqqufjmhieqwuufjntescbpth", "xssruebqucbqirkzfsrwsrnard", "vykwiekcgcualeubejlglpioyr", "zqonaittpznvzaegctezvgrjak", "oeeavxiwrfdroahrdzoqfhhokg", "wkzeqstrweworaqypfrmznagew", "miwoyjugqupmfspaarganpcztq", "uqdhjmtdsmqqbakihtcdjxluht", "rerhgugynhhapxvzcsosqhmhjb", "aqtouyhjvicvlclouebjeaxsyx", "bzqsbjniotkfvmpytspzprflmj", "nvyflhjvasxfbkzhkraustdtfd", "rrpnswfbjacrbuaommysxwhyjk", "nbyjogzyrebeorlxmgshudnpjj", "wxhsapvmnfteueguylfrgiugbf", "qdnplnfptdszrgieohvxirwsko", "anbeydgmminizphatxitsigmvf", "tdfgzwzqlrmssxtwowqqkfclxc"}
	res := findSubstring(s, words)
	fmt.Println("res=", res)
}

func TestFindSubstring5(t *testing.T) {
	s := "ab"
	words := []string{"ab"}
	res := findSubstring(s, words)
	fmt.Println("res=", res)
}

func TestFindSubstring6(t *testing.T) {
	s := "a"
	words := []string{"a", "a"}
	res := findSubstring(s, words)
	fmt.Println("res=", res)
}

func TestSlice(t *testing.T) {
	seq := []string{"a", `bb`, "ccc", `dddd`}
	index := 3
	fmt.Println(seq)
	newSeq := append(seq[:0], seq[0:index]...)
	fmt.Println(newSeq)
	newSeq = append(newSeq, seq[index+1:]...)
	fmt.Println(newSeq)

	newSeq = append([]string{}, "3")
}
